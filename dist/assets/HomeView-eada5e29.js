import{d as c,o as s,c as n,a as d,b as a,r as h,F as u,e as m,t as p,f as l,n as g,u as f,w,T as y,p as _,g as b,h as x,i as I,j as v}from"./index-bdccf115.js";const k="/assets/7th_nov_23_1-5f319197.png",A={class:"markdown-body"},S=d('<p>Previously I’ve already created a front-end NextJs project called <a href="https://github.com/fattynomnom/itrack-nextjs">iTrack</a>.</p><p>For context, the purpose of the app is to track user’s expenses.</p><p>As of right now, the data is the app is mocked, so what I need to do next is create a backend for it, for which I already know I want to use GraphQL (GraphQL &gt; REST ftw).</p><p>From past experience, I’ve used Hasura for creating GraphQL APIs.</p><p><strong>Pros of using Hasura:</strong></p><ul><li>Minimal code writing. APIs, models and actions can all be created / managed via UI.</li><li>Able to connect a PostgreSQL database.</li><li>Automatically handles hosting of your database and APIs.</li></ul><p><strong>Cons of using Hasura:</strong></p><ul><li>Personally prefer writing code than using UI.</li><li>If I were to host my database and APIs on Hasura, whoever wants to try out my project would also need to host their own database and APIs on Hasura as well, would be easier if APIs and database can run locally.</li><li>Expanding on allowing users to run project locally, I am aware when using Hasura’s UI, our actions (eg. running SQL queries, creating tables) can be “recorded” into code, which can be backed up to another repo to allow replication. However, I find this entire structure very messy, managing our own migration files and code is easier. I could be wrong about this and just don’t know how to manage this well enough.</li></ul><p>Overall, I decided to forgo using a platform like Hasura. Plus, it could be a chance to test out my rusty SQL query skills.</p><p>First, I setup my ExpressJs app with Apollo so that I can start writing GraphQL APIs. I followed <a href="https://blog.logrocket.com/build-graphql-app-node-js-typescript-graphql-request/">this tutorial</a>.</p><p>Then I setup a PostgreSQL database using <a href="https://gist.github.com/phortuin/2fe698b6c741fd84357cec84219c6667">these guidelines</a>.</p><p>After the database setup, I followed <a href="https://medium.com/@yasirahboyce/node-express-knex-postgresql-22e10daf0817">this tutorial</a> to setup Knex.</p><p>If you don’t know what Knex is, essentially it is a query builder for many SQL databases, including PostgreSQL. Tbh, very reminiscent of Laravel days. <a href="https://knexjs.org/">Here is the Knex documentation</a> if you’re curious.</p><p>After setting up Knex, I replaced the static datasets with PostgreSQL queries, run <code class="">npm run dev</code> and tested my APIs on <a href="https://studio.apollographql.com/sandbox/explorer">Apollo’s GraphQL sandbox</a>:</p><p><img src="'+k+'" alt="Apollo sandbox testing result"></p><p>So far everything works!</p><p>I’ve commited my progress to this repo: <a href="https://github.com/fattynomnom/itrack-expressjs">itrack-expressjs</a>.</p><p><strong>Next steps:</strong></p><ul><li>Learn how to use Knex’s query builder and replace PostgreSQL queries with Knex</li><li>Learn how to integrate <a href="https://auth0.com/">Auth0</a> into our backend application</li></ul><p><strong>Here’s a full list of resources I’ve referenced:</strong></p><ul><li><a href="https://knexjs.org/">Knex</a></li><li><a href="https://blog.logrocket.com/build-graphql-app-node-js-typescript-graphql-request/">Build a GraphQL app in Node.js with TypeScript and graphql-request</a></li><li><a href="https://gist.github.com/phortuin/2fe698b6c741fd84357cec84219c6667">Set up postgres + database on MacOS (M1)</a></li><li><a href="https://medium.com/@yasirahboyce/node-express-knex-postgresql-22e10daf0817">Node + Express + Knex + PostgreSQL</a></li></ul>',21),L=[S],P={title:"GraphQL + PostgreSQL + ExpressJs setup",date:"7/11/23"},q=c({__name:"7th_nov_23",setup(e,{expose:t}){return t({frontmatter:{title:"GraphQL + PostgreSQL + ExpressJs setup",date:"7/11/23"},excerpt:void 0}),(r,i)=>(s(),n("div",A,L))}}),Q={class:"markdown-body"},j=d(`<p>A short one for today, but something is better than nothing I guess!</p><p>So previously I had only used <a href="https://knexjs.org/">Knex</a> for writing migration and seed files (following <a href="https://medium.com/@yasirahboyce/node-express-knex-postgresql-22e10daf0817">this tutorial</a>). Querying was still being done via SQL.</p><p>So I decided its time to convert these SQL queries to use the Knex query builder.</p><p>First, setting up the config:</p><pre><code class="">// database.ts
const Knex = knex({
    client: &#39;pg&#39;,
    connection: {
        user: ({}).POSTGRESQL_USER,
        password: ({}).POSTGRESQL_PW,
        host: ({}).POSTGRESQL_HOST,
        port: Number(({}).POSTGRESQL_PORT),
        database: ({}).POSTGRESQL_DB
    }
})

export default Knex
</code></pre><p>And after doing a brief reading of the documentation, I converted these queries:</p><pre><code class="">pool.query(&#39;SELECT * from users&#39;)
pool.query(
    &#39;INSERT INTO users (email) VALUES ($1) RETURNING email&#39;,
    [user.email]
)
</code></pre><p>Into these:</p><pre><code class="">Knex(&#39;users&#39;).select(&#39;*&#39;)
Knex(&#39;users&#39;).insert(user, &#39;*&#39;)
</code></pre><p>Much easier to read and I don’t have to worry about SQL syntax! Knex’s query builder also looks a lot like Laravel’s query builder… But its been awhile since Laravel for me, so I don’t remember these things off the top of my head anymore.</p><p>View the changes I’ve made in this repo: <a href="https://github.com/fattynomnom/itrack-expressjs">itrack-expressjs</a>.</p><p><strong>Next thing I’ll be working on:</strong> Integrating Auth0 with Express</p>`,12),T=[j],E={title:"Writing queries using Knex",date:"8/11/23"},G=c({__name:"8th_nov_23",setup(e,{expose:t}){return t({frontmatter:{title:"Writing queries using Knex",date:"8/11/23"},excerpt:void 0}),(r,i)=>(s(),n("div",Q,T))}}),N="/assets/13th_nov_23_1-fdfc503b.png",H="/assets/13th_nov_23_2-cdae4a2d.png",K="/assets/13th_nov_23_3-95325731.png",$={class:"markdown-body"},C=d('<p>Previously I talked about setting up an Apollo server with ExpressJs for GraphQL APIs, but these APIs aren’t protected. Ideally I want my APIs to be protected by something like an Authorization header.</p><p>I decided to go with <a href="https://auth0.com/docs/">Auth0</a> as this seems like the industry standard for authentication, plus it is a method that I haven’t tried before, so plenty of opportunity for learning.</p><p>First, I followed <a href="https://auth0.com/docs/quickstart/backend/nodejs/interactive">this tutorial</a> and created an API on the Auth0 dashboard like so:</p><p><img src="'+N+`" alt="Create API on Auth0 dashboard"></p><p>Then, using the <code class="">express-oauth2-jwt-bearer</code> package mentioned in the tutorial, I created the middleware that checks for the JWT token in the Authorization header:</p><pre><code class="">// src/index.ts
const checkJwt = auth({
    audience: ({}).AUTH0_API_AUDIENCE,
    issuerBaseURL: ({}).AUTH0_DOMAIN
})
</code></pre><p>Now I just need to add this middleware to my GraphQL routes, which took me awhile to find the resources I need for this, but eventually I found <a href="https://www.apollographql.com/docs/apollo-server/api/express-middleware/">this</a>.</p><p>Using this method of <code class="">expressMiddleware</code> allows me to add the <code class="">checkJwt</code> middleware like so:</p><pre><code class="">// src/index.ts
app.use(
    &#39;/graphql&#39;,
    cors(),
    express.json(),
    checkJwt,
    expressMiddleware(server, {
        context: async ({ req }) =&gt; {
            // add context here
        }
    })
)
</code></pre><p><strong>Very important note:</strong> Do remember that to use <code class="">expressMiddleware</code>, the <code class="">cors()</code> and <code class="">express.json()</code> are <strong>required</strong>.</p><p>I skimmed over this information in the docs and spent a good few hours trying to figure out why my Apollo server wasn’t starting. Lesson learned: do not skim.</p><p>What if I need something that is encoded in the JWT token claims?</p><p>I followed <a href="https://www.apollographql.com/docs/apollo-server/security/authentication/">this tutorial</a> and modified the <code class="">context</code> to the following:</p><pre><code class="">// src/index.ts
app.use(
    &#39;/graphql&#39;,
    cors(),
    express.json(),
    checkJwt,
    expressMiddleware(server, {
        context: async ({ req }) =&gt; {
            const token = req.headers.authorization || &#39;&#39;
            console.log(1, token)

            console.log(2, req.auth?.payload)

            return { user: { email: &#39;test@mail.com&#39; } }
        }
    })
)
</code></pre><p>Since I haven’t added anything to the claims yet, I will just use some loggers and return a static email to the context for now.</p><p>Now for testing, first I went to my Auth0 API dashboard and got a test token from the “Test” tab.</p><p>Then I launched my server via <code class="">npm run dev</code>, and used the <a href="https://studio.apollographql.com/sandbox/explorer">Apollo Sandbox</a> to test my GraphQL APIs:</p><p><img src="`+H+'" alt="Testing auth header on Apollo Sandbox"></p><p>It works! Checking my terminal showed that the token was also decoded successfully:</p><p><img src="'+K+'" alt="Results logged to console"></p><p>So now that everything works so far, my next step is to actually implement the authentication part in my <a href="https://github.com/fattynomnom/itrack-nextjs">NextJs client</a>.</p><p>I’ve committed all my progress so far to <a href="https://github.com/fattynomnom/itrack-expressjs">this repo</a>.</p><p><strong>You can check the list of resources I’ve referenced here:</strong></p><ul><li><a href="https://auth0.com/docs/quickstart/backend/nodejs/interactive">Add authorization to an Express.js API application</a></li><li><a href="https://www.apollographql.com/docs/apollo-server/api/express-middleware/">expressMiddleware API docs</a></li><li><a href="https://www.apollographql.com/docs/apollo-server/security/authentication/">Authentication and authorization</a></li></ul>',24),J=[C],R={title:"Protecting GraphQL API routes with Auth0",date:"13/11/23"},O=c({__name:"13th_nov_23",setup(e,{expose:t}){return t({frontmatter:{title:"Protecting GraphQL API routes with Auth0",date:"13/11/23"},excerpt:void 0}),(r,i)=>(s(),n("div",$,J))}}),M={xmlns:"http://www.w3.org/2000/svg",fill:"none",stroke:"currentColor","stroke-width":"1.5",class:"w-6 h-6",viewBox:"0 0 24 24"},U=a("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"m19.5 8.25-7.5 7.5-7.5-7.5"},null,-1),V=[U];function D(e,t){return s(),n("svg",M,[...V])}const B={render:D},z=e=>(_("data-v-4a41b72c"),e=e(),b(),e),F={class:"divide-y p-10 md:px-28 lg:py-36 h-full lg:overflow-y-auto"},W=d('<section data-v-4a41b72c><h1 data-v-4a41b72c>Hey there!</h1><p data-v-4a41b72c> I&#39;m a part time software engineer and full time cat person who likes problem solving and puzzles. </p><p data-v-4a41b72c> I don&#39;t have any fancy repositories for you to see (I&#39;m sure you can understand as a software developer, most of our client works are proprietary), though you can still head over to my <a href="https://github.com/fattynomnom" data-v-4a41b72c>Github</a> to view my personal projects I&#39;m working on when I have the time! </p><p data-v-4a41b72c> I&#39;m a huge advocate for Typescript, object-oriented programming and clean coding practices (DRY, SOLID). I know writing it is a pain, but reading clean code is <i data-v-4a41b72c>*chefs kiss*</i>. Do I sit back sometimes and admire clean code structures? Yes, yes I do. </p><p data-v-4a41b72c> My hobbies are gardening, reading mangas, watching movies and starting 1001 coding projects that I don&#39;t finish. </p><p data-v-4a41b72c> I&#39;m trying to hold myself accountable by creating this site to document my learning process. Hopefully I&#39;ll be able to learn and update this space as much as possible (when life, work and cats doesn&#39;t get in the way). </p><p data-v-4a41b72c> Just in case you&#39;re curious, this site was made with VueJs and TailwindCss (both of which I <i data-v-4a41b72c>think</i> I&#39;m a master at). </p></section>',1),Y=z(()=>a("h1",null,"What I'm learning",-1)),X=["onClick"],Z={class:"text-sm text-gray-400"},ee=c({__name:"HomeView",setup(e){const t=h([{frontmatter:R,component:O,displayed:!1},{frontmatter:E,component:G,displayed:!1},{frontmatter:P,component:q,displayed:!1}]);return(r,i)=>(s(),n("main",F,[W,a("section",null,[Y,(s(!0),n(u,null,m(t.value,o=>(s(),n("div",{key:o.frontmatter.title,class:"space-y-5 p-5 md:p-10 rounded-lg bg-gray-50 overflow-hidden"},[a("div",{class:"flex items-center justify-between cursor-pointer space-x-5",onClick:oe=>o.displayed=!o.displayed},[a("div",null,[a("p",Z,p(o.frontmatter.date),1),a("h2",null,p(o.frontmatter.title),1)]),l(f(B),{class:g(["w-5 h-5 text-gray-500",{"rotate-180":o.displayed}])},null,8,["class"])],8,X),l(y,null,{default:w(()=>[o.displayed?(s(),x(I(o.component),{key:0})):v("",!0)]),_:2},1024)]))),128))])]))}});const te=(e,t)=>{const r=e.__vccOpts||e;for(const[i,o]of t)r[i]=o;return r},ae=te(ee,[["__scopeId","data-v-4a41b72c"]]);export{ae as default};
